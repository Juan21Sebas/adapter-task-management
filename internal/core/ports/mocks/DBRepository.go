// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	deletetask "adapter-task-management/internal/core/domain/repository/model/deleteTask"
	getTask "adapter-task-management/internal/core/domain/repository/schema/getTask"

	gettask "adapter-task-management/internal/core/domain/repository/model/getTask"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"

	posttask "adapter-task-management/internal/core/domain/repository/model/postTask"

	updateTask "adapter-task-management/internal/core/domain/repository/schema/updateTask"

	updatetask "adapter-task-management/internal/core/domain/repository/model/updateTask"
)

// DBRepository is an autogenerated mock type for the DBRepository type
type DBRepository struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: ctx, request
func (_m *DBRepository) CreateTask(ctx *gin.Context, request *posttask.Task) (string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *posttask.Task) (string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *posttask.Task) string); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *posttask.Task) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: ctx, request
func (_m *DBRepository) DeleteTask(ctx *gin.Context, request *deletetask.Task) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *deletetask.Task) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectTask provides a mock function with given fields: ctx, request
func (_m *DBRepository) SelectTask(ctx *gin.Context, request *gettask.Task) (*getTask.TaskResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SelectTask")
	}

	var r0 *getTask.TaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *gettask.Task) (*getTask.TaskResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *gettask.Task) *getTask.TaskResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*getTask.TaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *gettask.Task) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: ctx, request
func (_m *DBRepository) UpdateTask(ctx *gin.Context, request *updatetask.Task) (*updateTask.TaskResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 *updateTask.TaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *updatetask.Task) (*updateTask.TaskResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *updatetask.Task) *updateTask.TaskResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*updateTask.TaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *updatetask.Task) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDBRepository creates a new instance of DBRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBRepository {
	mock := &DBRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
