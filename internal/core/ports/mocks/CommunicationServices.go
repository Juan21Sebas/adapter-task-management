// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	deletetask "adapter-task-management/internal/core/domain/repository/model/deleteTask"
	gettask "adapter-task-management/internal/core/domain/repository/model/getTask"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"

	posttask "adapter-task-management/internal/core/domain/repository/model/postTask"

	repository "adapter-task-management/internal/core/domain/repository"

	updatetask "adapter-task-management/internal/core/domain/repository/model/updateTask"
)

// CommunicationServices is an autogenerated mock type for the CommunicationServices type
type CommunicationServices struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: ctx, request
func (_m *CommunicationServices) CreateTask(ctx *gin.Context, request *posttask.Task) (*repository.Response, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *repository.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *posttask.Task) (*repository.Response, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *posttask.Task) *repository.Response); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *posttask.Task) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: ctx, request
func (_m *CommunicationServices) DeleteTask(ctx *gin.Context, request *deletetask.Task) (*repository.Response, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 *repository.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *deletetask.Task) (*repository.Response, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *deletetask.Task) *repository.Response); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *deletetask.Task) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectTask provides a mock function with given fields: ctx, request
func (_m *CommunicationServices) SelectTask(ctx *gin.Context, request *gettask.Task) (*repository.Response, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SelectTask")
	}

	var r0 *repository.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *gettask.Task) (*repository.Response, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *gettask.Task) *repository.Response); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *gettask.Task) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: ctx, request
func (_m *CommunicationServices) UpdateTask(ctx *gin.Context, request *updatetask.Task) (*repository.Response, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 *repository.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *updatetask.Task) (*repository.Response, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *updatetask.Task) *repository.Response); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *updatetask.Task) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCommunicationServices creates a new instance of CommunicationServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommunicationServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommunicationServices {
	mock := &CommunicationServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
